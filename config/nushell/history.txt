cargo install zellij
zellij
zellij --help
zellij options
zellij setup
zellij setup --help
zellij setup --generate-auto-start nu
zellij setup --generate-auto-start zsh
zellij options --help
zellij options --pane-frames false
zellij attach -c
zellij --help
zellij attach --help
zellij attach --create options --pane-frames false
zellij options --help
zellij attach --create options --pane-frames false --default-shell (which nu |get 0 |get path)
which zellij
which zellij |get 0 |get path
code ~/.bashrc
bash
cp /mnt/c/Users/akaba/AppData/Roaming/nushell/config.nu ~/.config/nushell/config.nu
cp /mnt/c/Users/akaba/AppData/Roaming/nushell/env.nu ~/.config/nushell/env.nu
speedtest-rs.exe 
bash
zsh
sh
cat ~/.bashrc
exi
ssh root@vdbum.day4solutions.com
ssh root@vdbum.day4solutions.com
ls
bot
btm
cargo install bottom
btm
docker run -it --rm ghcr.io/jonsson-analytics/devcontainer-base:sha-2a40780 bash
which docker
speedtest-rs.exe 
ssh root@bau.day4solutions.com
cargo install helix
git clone --depth=1 https://github.com/helix-editor/helix
ls
cd helix/
ls
git --help
git tag
git branch
git fetch
git fetch -a
git branch
git tag
ls
cargo install --locked --path helix-term
ls
ln -s $PWD/runtime ~/.config/helix/runtime
ln -s (pwd)/runtime ~/.config/helix/runtime
pwd
pwd | str join 
pwd | str join /foo
pwd | str join --help
`pwd`/foo
echo `pwd`/foo
echo (pwd )
with-env foo=(pwd) { echo $foo }
with-env foo=(pwd) { echo $env.foo }
with-env foo=(pwd |get 0) { echo $env.foo }
pwd |get 0
pwd
pwd | append /runtime
pwd | append /runtime | str join 
pwd | append /runtime | str join '\n'
pwd | append /runtime | str join '-'
pwd | append /runtime
pwd | str join 
echo "foo" | append (echo "bar")
echo "foo" | append (echo "bar") | str join
pwd
pwd | table
pwd | str contains "\n"
pwd | strip 
strip --help
which tr
tr --help
pwd | tr -d "\n" | str contains "\n"
pwd | tr -d "\n" | append /runtime
pwd | tr -d "\n" | append /runtime | str join
ln -s (pwd | tr -d "\n" | append /runtime | str join) ~/.config/helix/runtime
mkdir -p .config/helix/runtime
mkdir .config/helix/runtime
ln -s (pwd | tr -d "\n" | append /runtime | str join) ~/.config/helix/runtime
ln -sf (pwd | tr -d "\n" | append /runtime | str join) ~/.config/helix/runtime
let-env foo=(pwd | tr -d "\n" | append /runtime | str join)
let-env foo = (pwd | tr -d "\n" | append /runtime | str join)
echo $env.foo
ln -s $env.foo ~/.config/helix/runtime
ls /home/
ls /home/jonsson-nils/
ls /home/jonsson-nils/.config/
mkdir ~/.config/helix/runtime
ls /home/jonsson-nils/.config/
ln -s $env.foo ~/.config/helix/runtime
ls $env.foo
rm -rf ~/.config/helix/runtime
ln -s $env.foo ~/.config/helix/runtime
ls $env.foo
ls ~/.config/helix/runtime/
ls
which hx
ls
hx
vim ~/.bashrc
ls
code ~/.config/nushell/env.nu
hx ~/.config/nushell/env.nu
hx
whoami
which hx
hx
ls
cd ~/
ls
cd helix/
ls
cargo install --locked --path helix-term
which cargo
which nu
which cargo
ls
bash
ls
hx ~/.config/nushell/env.nu
which hx
bash
echo $PATH
echo $env.PATH
which hx
echo $env.PATH
bash
wsl
which cargo
cd
which cargo
ls
cd helix/
hx .envrc
color256
let-env TERM = xterm-256color
let-env TERM = 'xterm-256color'
echo $env.TERM
hx
infocmp
sudo apt-get install colortest-python
colortest-python 
colortest-python -l
hx ~/.config/helix/config.toml
hx
ls
hx --help
cd
ls
hx foo
rm foo
hx --tutor
ls
cd ..
ls
hx --health
cargo install --locked rust-analyzer
rustup component add rust-src
which rust-analyzer
rustup component add rust-analyzer
hx --health rust
which rust-analyzer
nu
rustup add rust-analyzer
rustup component add rust-analyzer
rustup default nightly-2023-03-14
rustup --help
rustc --version
rustup component add rust-analyzer
which rust-analyzer
rustup --version
hx ~/.cargo/bin/rust-analyzer
chmod u+x ~/.cargo/bin/rust-analyzer
which rust-analyzer
rust-analyzer
rust-analyzer --version
ls
hx --health rust
apt -help
apt --help
apt search lldb
rustup component add lldb
curl -L "https://github.com/vadimcn/vscode-lldb/releases/download/v1.7.0/codelldb-x86_64-linux.vsix" -o "codelldb-x86_64-linux.zip"
unzip codelldb-x86_64-linux.zip
ls
chmod u-x  ~/.cargo/bin/rust-analyzer
ls
cd
ll
ls
mkdir bin
cd bin/
ls
unzip ../codelldb-x86_64-linux.zip 'extension/adapter/*' 'extension/lldb/*'
ls
mv extension/ codelldb_adapter
rm codelldb_adapter/
ls
cd ..
rm android-studio-2022.1.1.20-linux.tar.gz?cms_redirect=yes&mh=bG&mip=89.15.237.179&mm=28&mn=sn-i5heen7d&ms=nvh&mt=1675680266&mv=m&mvi=5&pl=21&rmhost=r1---sn-i5heen7d.gvt1.com&shardbypass=sd&smhost=r5---sn-i5heen7z.gvt1.com
ls
rm codelldb-x86_64-linux.zip
rm extension/
rm extension/ -r
rm extension.vsixmanifest
ls
rm [Content_Types].xml
rm '[Content_Types].xml'
ls
ls bin/
mv bin/codelldb_adapter/ ~/.cargo/
cd ~/.cargo/
ls
cd bin/
ln -s ../codelldb_adapter/adapter/codelldb
which codelldb
hx --health rust
chmod u-x  ~/.cargo/bin/rust-analyzer
hx --health rust
ls ~/.cargo/bin/
chmod u+x ~/.cargo/bin/rust-analyzer
ls ~/.cargo/bin/
codelldb
codelldb -h
hx --health rust
lldb-vscode
wsl
cd
ls
hx ~/.config/helix/config.toml
hx --health rust
hx ~/.config/helix/config.toml
which lldb
apt search lldb
apt install lldb
sudo apt install lldb
which lldb
which lldb-vscode
hx --health rust
which codelldb
hx --health rust
sudo apt install rust-lldb
hx --health rust
which lldb-vscode
cd helix/
ls
ls runtime/
which lldb
lldb --version
which lldb
lldb
lldb --help
lldb -V
lldb -v
apt update
sudo apt update
sudo apt list --upgradable
sudo apt upgrade
lldb -v
sudo apt install lldb-15
lldb-15 --version
lldb-16 --version
sudo apt install lldb-16
ls
hx .
hx ~/.config/helix/config.toml
ls
hx .
hx --health rust
hx ~/.config/helix/languages.toml
hx --health rust
hx .
rm ~/.cargo/bin/rust-analyzer
rustup which --toolchain default rust-analyzer
rustup which --toolchain nightly rust-analyzer
rustup which --toolchain nightly-2023-03-14 rust-analyzer
ln -sf (rustup which --toolchain nightly-2023-03-14 rust-analyzer) ~/.cargo/bin/rust-analyzer
ls ~/.cargo/bin/rust-analyzer
ls ~/.cargo/bin
which rust-analyzer
hx --health rust
ls
hx
ls
zellij attach --create options --pane-frames false --default-shell (which nu |get 0 |get path)
cd
zellij attach --create options --pane-frames false --default-shell (which nu |get 0 |get path)
ls
nu -c 'zellij attach --create options --pane-frames false --default-shell (which nu |get 0 |get path)'
ls
ls bin
rmdir bin
hx ~/.bin
hx ~/.bin/login.nu
ls
mkdir ~/.bin
(which nu)
(which nu).path
(which nu).path.0
(which nu).0.path
chmod u+x ~/.bin/login.nu
~/.bin/login.nu
zellij
~/.bin/login.nu
zellij
zellij --help
zellij kill-all-sessions
ls
hx ~/.bin/login.nu
~/.bin/login.nu
hx ~/.bin/login.nu
ls
cd
ls
hx ~/.bin/login.nu
cd
ls
cd
zellij --help
zellij setup
zellij setup --help
zellij setup --generate-auto-start bash
hx ~/.bin/login.nu
zellij setup --generate-auto-start nu
zellij setup --generate-auto-start nushell
zellij setup --generate-auto-start --help
zellij setup --generate-auto-start bash | save --append ~/.bin/login.nu
hx ~/.bin/login.nu
/usr/bin/bash
zellij setup --dump-config
zellij setup --dump-config | save -f ~/.config/zellij/config.kdl
mkdir ~/.config/zellij
zellij setup --dump-config | save -f ~/.config/zellij/config.kdl
hx ~/.config/zellij/config.kdl
zellij a -c
hx
ls
cd
ls
cd helix/
ls
hx
hx ~/.config/helix/config.toml
hx
cd ..
ls
which nvim
sudo apt search nvim
apt search nvim
apt search vim
sudo apt install neovim
nvim
hx
hx .
ls
cd helix/
hx .
cd
ls
mkdir test
cd test/
cargo init
cd ..
mv test/ my-test
cd my-test/
cargo init .
hx ~/.config/nushell/env.nu
ls
cd
bat ~/.config/nushell/env.nu
ls
cd my-test/
ls
gh
gh login
gh actions
gh run list
ls
gh
cd
ls
gh repo
gh repo list
gh login
gh auth
gh auth login
gh repo
gh repo list jonsson-analytics
gh 
gh issue list
ls
mkdir projects
cd projects/
ls
gh repo clone jonsson-analytics/devcontainer-base
ls
gh repo clone jonsson-analytics/rusty-ml
ls
which docker
docker
docker ps
docker ps --help
hx
ls
cd ..
ls
rm -rf my-test
rm -rf vdbum-backup/
ls
which gcloud
gcloud 
gcloud
ls
rm -rf google-cloud-sdk/
getconf LONG_BIT
cd ..
ll
ls
curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-422.0.0-linux-x86_64.tar.gz
ls
tar -xf google-cloud-cli-422.0.0-linux-x86_64.tar.gz
ls
mkdir .bin
mv google-cloud-sdk/ .bin/
mkdir .programs
mv .bin/google-cloud-sdk/ .programs/
ls .programs/
ls
rm google-cloud-cli-422.0.0-linux-x86_64.tar.gz
ls
mv helix/ .programs/
cd .programs/
ls
cd helix/
ls
ln -sf runtime/ ../../.config/helix/runtime
hx
zellij
hx
cd
ls
zellij
zellij a -c
ls
cd projects
ls
cd rusty-ml/
ls
bacon
cargo install --locked bacon
ls
bacon
which sccache
sccache
which sccache
bacon
which rustc
hx
cd ~/projects/rusty-ml/
ls
with-env { RUSTC_WRAPPER: (which sccache).0.path } { bacon }
hx
ls
hx
ls
zellij a -c
ls
cd
ls
cd projects/
ls
top
htop
bacon
cd rusty-ml/
btm
ls
ls projects/
touch projects/foo
touch projects/bar
ls projects/
ls projects/ | where type == 'file'
ls projects/ | where type == 'dir'
ls projects/ | where type == 'dir' | get name
ls projects/ | where type == 'dir' | get name | str join ' -- '
(ls projects/ | where type == 'dir').name
(ls projects/ | where type == 'dir').name.0
(ls projects/ | where type == 'dir').name.1
(which nu).0.name
(which nu).0.path
ls
cd .programs/helix/
ls
git clone https://github.com/helix-editor/helix
cd helils
cd ..
ls
rm -rf helix/
git clone https://github.com/helix-editor/helix
cd helix
cargo install --locked --path helix-term
which hx
pwd
(pwd | tr -d'\n')
which tr
(pwd | tr -d"\n")
tr -d --help
tr -d '\n'
(pwd | tr -d '\n')
(pwd | tr -d '\n' | append /runtime | str join)
ln -sf (pwd | tr -d '\n' | append /runtime | str join) ~/.config/helix/runtime
hx
ls
cd ../
ls
cd ~/projects/
ls
ls | where type = file | get name | { rm $in }
ls | where type = file
ls
ls | where type == file
ls | where type == file | get name
ls | where type == file | get name | { rm $in }
ls
ls | where type == file | get name | each { rm $in }
ls
cd ~/.programs/
ls
cd google-cloud-sdk/
ls
./install.sh
hx ~/.bashrc ~/.config/nushell/
with-env { RUSTC_WRAPPER: (which sccache).0.path } { bacon }
ls
cd
ls
cat ~/.programs/google-cloud-sdk
cat ~/.programs/google-cloud-sdk/path.bash.inc
hx ~/.bashrc
hx ~/.config/nushell/env.nu
sudo chsh jonsson-nils -s /bin/bash
ls
ls -la
cd projects/
gh repo clone jonsson-analytics/dotfiles
gh repo list
git clone jonsson-nils/dotfiles
gh repo list
gh repo clone https://github.com/jonsson-nils/dotfiles
ls
cd dotfiles/
ls
git status
cp ~/.config/helix/config.toml .
ls
exa
exa -l
mkdir helix
mkdir nushell
mv config.toml helix/
ls
cp ~/.config/nushell/ nushell/
cp -r ~/.config/nushell/ nushell/
ls nushell/
rm -rf nushell
